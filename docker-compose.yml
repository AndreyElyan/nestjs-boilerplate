version: '3.8'

services:
  app:
    build:
      context: .
      target: development
      dockerfile: Dockerfile
    container_name: nestjs-boilerplate-app
    restart: unless-stopped
    ports:
      - '${PORT:-3000}:3000'
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${PORT:-3000}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=${DB_USERNAME:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_DATABASE=${DB_DATABASE:-nestjs_boilerplate}
      - DB_SYNCHRONIZE=${DB_SYNCHRONIZE:-false}
      - DB_LOGGING=${DB_LOGGING:-true}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - LOG_FORMAT=${LOG_FORMAT:-json}
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - nestjs-network

  postgres:
    image: postgres:16-alpine
    container_name: nestjs-boilerplate-postgres
    restart: unless-stopped
    ports:
      - '${DB_PORT:-5432}:5432'
    environment:
      - POSTGRES_USER=${DB_USERNAME:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_DATABASE:-nestjs_boilerplate}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USERNAME:-postgres}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nestjs-network

  adminer:
    image: adminer:latest
    container_name: nestjs-boilerplate-adminer
    restart: unless-stopped
    ports:
      - '8080:8080'
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - nestjs-network

networks:
  nestjs-network:
    driver: bridge

volumes:
  postgres-data:
